## Kubernetes
brew install kubectl
brew cask install minikube
brew cask install virtualbox

brew link --overwrite kubernetes-cli

kubectl version --client --short
minikube version
vboxmanage --version

minikube profile aepa-k8s
minikube config get profile

kubectl help

unset KUBECONFIG
minikube profile aepak8s
minikube config get profile

minikube start --memory=10240 --cpus=4 --disk-size=30g --kubernetes-version=v1.16.2 --vm-driver=virtualbox

minikube addons enable ingress
minikube addons enable metrics-server

kubectl get nodes
kubectl get pods --namespace=kube-system

kubectl create namespace first-attempts
kubectl config set-context $(kubectl config current-context) --namespace=first-attempts

kubectl apply -f kubernetes/first-attempts/nginx-deployment.yaml
kubectl get all

kubectl delete pod --selector app=nginx-app

kubectl apply -f kubernetes/first-attempts/nginx-service.yaml
kubectl get svc
minikube ip

kubectl run -i --rm --restart=Never curl-client --image=tutum/curl:alpine --command -- curl -s 'http://nginx-service:80'

kubectl delete namespace first-attempts

minikube stop
minikube start
kubectl config set-context $(kubectl config current-context) --namespace=aepak8s

minikube delete --profile aepak8s

rm -r ~/.minikube/profiles/aepak8s
kubectl config delete-context aepak8s

brew install siege
[ubuntu]
sudo apt install siege

minikube start --memory=10240 --cpus=4 --disk-size=30g --kubernetes-version=v1.16.2 --vm-driver=virtualbox
eval $(minikube docker-env)
./gradlew build && docker-compose build

kubectl create namespace aepa-k8s
kubectl config set-context $(kubectl config current-context) --namespace=aepa-k8s

kubectl create configmap config-repo --from-file=config-repo/ --save-config

kubectl create secret generic config-server-secrets --from-literal=ENCRYPT_KEY=my-very-secure-encrypt-key --from-literal=SPRING_SECURITY_USER_NAME=dev-usr --from-literal=SPRING_SECURITY_USER_PASSWORD=dev-pwd --save-config
kubectl create secret generic config-client-credentials --from-literal=CONFIG_SERVER_USR=dev-usr --from-literal=CONFIG_SERVER_PWD=dev-pwd --save-config
history -c; history -w

docker pull mysql:5.7
docker pull mongo:3.6.9
docker pull rabbitmq:3.7.8-management
docker pull openzipkin/zipkin:2.12.9

kubectl apply -k kubernetes/services/overlays/dev
kubectl wait --timeout=600s --for=condition=ready pod --all

kubectl get pods -o json | jq .items[].spec.containers[].image

HOST=$(minikube ip) PORT=31443 ./test-all.sh

kubectl delete namespace aepa-k8s

eval $(minikube docker-env)
docker-compose up -d mongodb mysql rabbitmq

docker tag aepa-k8s/auth-server aepa-k8s/auth-server:v1
docker tag aepa-k8s/config-server aepa-k8s/config-server:v1
docker tag aepa-k8s/gateway aepa-k8s/gateway:v1
docker tag aepa-k8s/product-composite-service aepa-k8s/product-composite-service:v1
docker tag aepa-k8s/product-service aepa-k8s/product-service:v1
docker tag aepa-k8s/recommendation-service aepa-k8s/recommendation-service:v1
docker tag aepa-k8s/review-service aepa-k8s/review-service:v1

kubectl create namespace aepa-k8s
kubectl config set-context $(kubectl config current-context) --namespace=aepa-k8s

kubectl create configmap config-repo --from-file=config-repo/ --save-config

kubectl create secret generic config-server-secrets --from-literal=ENCRYPT_KEY=my-very-secure-encrypt-key --from-literal=SPRING_SECURITY_USER_NAME=prod-usr --from-literal=SPRING_SECURITY_USER_PASSWORD=prod-pwd --save-config

kubectl create secret generic config-client-credentials --from-literal=CONFIG_SERVER_USR=prod-usr --from-literal=CONFIG_SERVER_PWD=prod-pwd --save-config

history -c; history -w

kubectl apply -k kubernetes/services/overlays/prod
kubectl wait --timeout=600s --for=condition=ready pod --all
kubectl get pods -o json | jq .items[].spec.containers[].image
docker-compose ps

HOST=$(minikube ip) PORT=31443 ./test-all.sh

kubectl get pod -l app=product -o jsonpath='{.items[*].spec.containers[*].image} '

docker tag aepa-k8s/product-service:v1 aepa-k8s/product-service:v2

siege https://$(minikube ip):31443/actuator/health -d1 -c1

kubectl get pod -l app=product -w

change to: image: aepa-k8s/product-service:v2
kubectl apply -k kubernetes/services/overlays/prod

kubectl get pod -l app=product -o jsonpath='{.items[*].spec.containers[*].image} '

kubectl set image deployment/product pro=aepa-k8s/product-service:v3

kubectl rollout history deployment product

kubectl rollout history deployment product --revision=2

kubectl rollout undo deployment product --to-revision=2

kubectl get pod -l app=product -o jsonpath='{.items[*].spec.containers[*].image} '

kubectl delete namespace aepa-k8s
eval $(minikube docker-env)
docker-compose down
