# [Change to WiFi]
[install]
brew cask install ngrok

https://dashboard.ngrok.com/get-started

[tunnel Authtoken]
ngrok authtoken <Your Auth Token>

[self-signed certificate]
openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout kubernetes/cert/tls.key -out kubernetes/cert/tls.crt -subj "/CN=minikube.me/O=minikube.me"

cat /etc/hosts

minikube start --memory=5120
minikube start --memory=5120 --cpus=4 --disk-size=25g

minikube addons list
minikube addons enable ingress
minikube addons enable metrics-server

eval $(minikube docker-env)

sudo bash -c "echo $(minikube ip) minikube.me | tee -a /etc/hosts"

./gradlew build && docker-compose build

kubectl delete namespace hands-on
kubectl create namespace hands-on
kubectl config set-context $(kubectl config current-context) --namespace=hands-on

./kubernetes/scripts/deploy-dev-env.sh

[if connection refused]
minikube stop
minikube start
kubectl get pods -n hands-on

kubectl get pods -o json | jq .items[].spec.containers[].image
[if connection refused]

HOST=minikube.me PORT=443 ./test-all.sh

ACCESS_TOKEN=$(curl -k https://writer:secret@minikube.me/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq .access_token -r)

curl -ks https://minikube.me/product-composite/2 -H "Authorization: Bearer $ACCESS_TOKEN" | jq .productId


[Auto-provision of certificates]
[Use the other at the end to install cert manager]
kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v0.12.0/cert-manager.yaml
kubectl wait --timeout=600s --for=condition=ready pod --all -n cert-manager

kubectl apply -f kubernetes/services/base/letsencrypt-issuer-staging.yaml

ngrok http https://minikube.me:443
NGROK_HOST=1dda561c.ngrok.io

[separate console]
kubectl get cert --watch
kubectl apply -f kubernetes/services/base/ingress-edge-server-ngrok.yml

keytool -printcert -sslserver $NGROK_HOST:443 | grep -E "擁有者:|發出者:"

kubectl apply -f kubernetes/services/base/letsencrypt-issuer-prod.yaml
kubectl apply -f kubernetes/services/base/ingress-edge-server-ngrok.yml

[Test]
ACCESS_TOKEN=$(curl -k https://writer:secret@1dda561c.ngrok.io/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq .access_token -r)
curl -ks https://1dda561c.ngrok.io/product-composite/2 -H "Authorization: Bearer $ACCESS_TOKEN" | jq .productId
[Test]

HOST=$NGROK_HOST PORT=443 ./test-all.sh

https://1dda561c.ngrok.io/actuator/health

[Prod]
Edit ingress-edge-server-ngrok.yml to prod
kubectl apply -f kubernetes/services/base/letsencrypt-issuer-prod.yaml
kubectl apply -f kubernetes/services/base/ingress-edge-server-ngrok.yml

keytool -printcert -sslserver $NGROK_HOST:443 | grep -E "擁有者:|發出者:"

[Test]
ACCESS_TOKEN=$(curl -k https://writer:secret@1dda561c.ngrok.io/oauth/token -d grant_type=password -d username=magnus -d password=password -s | jq .access_token -r)
curl -ks https://1dda561c.ngrok.io/product-composite/2 -H "Authorization: Bearer $ACCESS_TOKEN" | jq .productId
[Test]

HOST=$NGROK_HOST PORT=443 ./test-all.sh

https://1dda561c.ngrok.io/actuator/health

kubectl delete namespace hands-on
eval $(minikube docker-env --unset)
minikube delete

-----
eval $(minikube docker-env --unset)
minikube stop

docker-compose build

COMPOSE_FILE=docker-compose.yml
./test-all.sh start stop

docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)

docker rmi -f $(docker images -a -q)

COMPOSE_FILE=docker-compose-partitions.yml
./test-all.sh start stop

COMPOSE_FILE=docker-compose-kafka.yml
./test-all.sh start stop

demo.microservices
